{
    "summary": "The code sets up arguments for the \"AppAgent - Human Demonstration\" program, creates directories, processes lines from a record file, encodes images and extracts action types and parameters. It handles user actions by generating prompts with regular expressions and includes an else block to check for existing documents and refine them if enabled. The code waits for GPT-4V to generate documentation, constructs content including prompts and images, updates `doc_content`, logs entries, handles errors, and sleeps between requests.",
    "details": [
        {
            "comment": "This code is setting up arguments for a program called \"AppAgent - Human Demonstration\". It specifies required parameters such as the app and demo to be used. The code also creates directories if they do not exist, and defines paths for various files and directories related to the task at hand.",
            "location": "\"/media/root/Toshiba XG3/works/AppAgent/docs/src/scripts/document_generation.py\":0-34",
            "content": "import argparse\nimport ast\nimport json\nimport os\nimport re\nimport sys\nimport time\nimport prompts\nfrom config import load_config\nfrom model import ask_gpt4v\nfrom utils import print_with_color, encode_image\narg_desc = \"AppAgent - Human Demonstration\"\nparser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=arg_desc)\nparser.add_argument(\"--app\", required=True)\nparser.add_argument(\"--demo\", required=True)\nparser.add_argument(\"--root_dir\", default=\"./\")\nargs = vars(parser.parse_args())\nconfigs = load_config()\nroot_dir = args[\"root_dir\"]\nwork_dir = os.path.join(root_dir, \"apps\")\nif not os.path.exists(work_dir):\n    os.mkdir(work_dir)\napp = args[\"app\"]\nwork_dir = os.path.join(work_dir, app)\ndemo_dir = os.path.join(work_dir, \"demos\")\ndemo_name = args[\"demo\"]\ntask_dir = os.path.join(demo_dir, demo_name)\nxml_dir = os.path.join(task_dir, \"xml\")\nlabeled_ss_dir = os.path.join(task_dir, \"labeled_screenshots\")\nrecord_path = os.path.join(task_dir, \"record.txt\")\ntask_desc_path = os.path.join(task_dir, \"task_desc.txt\")"
        },
        {
            "comment": "Code is checking if certain directories exist and creating a directory for document generation. It then reads from a record file, processes each line, encoding images before_and_after the step, extracting action type and parameters.",
            "location": "\"/media/root/Toshiba XG3/works/AppAgent/docs/src/scripts/document_generation.py\":35-56",
            "content": "if not os.path.exists(task_dir) or not os.path.exists(xml_dir) or not os.path.exists(labeled_ss_dir) \\\n        or not os.path.exists(record_path) or not os.path.exists(task_desc_path):\n    sys.exit()\nlog_path = os.path.join(task_dir, f\"log_{app}_{demo_name}.txt\")\ndocs_dir = os.path.join(work_dir, \"demo_docs\")\nif not os.path.exists(docs_dir):\n    os.mkdir(docs_dir)\nprint_with_color(f\"Starting to generate documentations for the app {app} based on the demo {demo_name}\", \"yellow\")\ndoc_count = 0\nwith open(record_path, \"r\") as infile:\n    step = len(infile.readlines()) - 1\n    infile.seek(0)\n    for i in range(1, step + 1):\n        img_before = encode_image(os.path.join(labeled_ss_dir, f\"{demo_name}_{i}.png\"))\n        img_after = encode_image(os.path.join(labeled_ss_dir, f\"{demo_name}_{i + 1}.png\"))\n        rec = infile.readline().strip()\n        action, resource_id = rec.split(\":::\")\n        action_type = action.split(\"(\")[0]\n        action_param = re.findall(r\"\\((.*?)\\)\", action)[0]\n        if action_type == \"tap\":"
        },
        {
            "comment": "This code handles different user actions and generates prompts based on the action type. It uses regular expressions to replace placeholders in prompt templates with specific action parameters.",
            "location": "\"/media/root/Toshiba XG3/works/AppAgent/docs/src/scripts/document_generation.py\":57-74",
            "content": "            prompt_template = prompts.tap_doc_template\n            prompt = re.sub(r\"<ui_element>\", action_param, prompt_template)\n        elif action_type == \"text\":\n            input_area, input_text = action_param.split(\":sep:\")\n            prompt_template = prompts.text_doc_template\n            prompt = re.sub(r\"<ui_element>\", input_area, prompt_template)\n        elif action_type == \"long_press\":\n            prompt_template = prompts.long_press_doc_template\n            prompt = re.sub(r\"<ui_element>\", action_param, prompt_template)\n        elif action_type == \"swipe\":\n            swipe_area, swipe_dir = action_param.split(\":sep:\")\n            if swipe_dir == \"up\" or swipe_dir == \"down\":\n                action_type = \"v_swipe\"\n            elif swipe_dir == \"left\" or swipe_dir == \"right\":\n                action_type = \"h_swipe\"\n            prompt_template = prompts.swipe_doc_template\n            prompt = re.sub(r\"<swipe_dir>\", swipe_dir, prompt_template)\n            prompt = re.sub(r\"<ui_element>\", swipe_area, prompt)"
        },
        {
            "comment": "Else block: checks if a document for the current task already exists and refines it if DOC_REFINE is enabled in the config file.",
            "location": "\"/media/root/Toshiba XG3/works/AppAgent/docs/src/scripts/document_generation.py\":75-95",
            "content": "        else:\n            break\n        task_desc = open(task_desc_path, \"r\").read()\n        prompt = re.sub(r\"<task_desc>\", task_desc, prompt)\n        doc_name = resource_id + \".txt\"\n        doc_path = os.path.join(docs_dir, doc_name)\n        if os.path.exists(doc_path):\n            doc_content = ast.literal_eval(open(doc_path).read())\n            if doc_content[action_type]:\n                if configs[\"DOC_REFINE\"]:\n                    suffix = re.sub(r\"<old_doc>\", doc_content[action_type], prompts.refine_doc_suffix)\n                    prompt += suffix\n                    print_with_color(f\"Documentation for the element {resource_id} already exists. The doc will be \"\n                                     f\"refined based on the latest demo.\", \"yellow\")\n                else:\n                    print_with_color(f\"Documentation for the element {resource_id} already exists. Turn on DOC_REFINE \"\n                                     f\"in the config file if needed.\", \"yellow\")\n                    continue\n        else:"
        },
        {
            "comment": "The code is waiting for GPT-4V to generate documentation for an element with the resource ID. It then constructs content, possibly a prompt and two images before and after an action on the element. If there are no errors in the response from GPT-4V, it updates the `doc_content` dictionary with the generated message, and writes a log entry with the step number, prompt, and image names.",
            "location": "\"/media/root/Toshiba XG3/works/AppAgent/docs/src/scripts/document_generation.py\":96-129",
            "content": "            doc_content = {\n                \"tap\": \"\",\n                \"text\": \"\",\n                \"v_swipe\": \"\",\n                \"h_swipe\": \"\",\n                \"long_press\": \"\"\n            }\n        print_with_color(f\"Waiting for GPT-4V to generate documentation for the element {resource_id}\", \"yellow\")\n        content = [\n            {\n                \"type\": \"text\",\n                \"text\": prompt\n            },\n            {\n                \"type\": \"image_url\",\n                \"image_url\": {\n                    \"url\": f\"data:image/jpeg;base64,{img_before}\"\n                }\n            },\n            {\n                \"type\": \"image_url\",\n                \"image_url\": {\n                    \"url\": f\"data:image/jpeg;base64,{img_after}\"\n                }\n            }\n        ]\n        rsp = ask_gpt4v(content)\n        if \"error\" not in rsp:\n            msg = rsp[\"choices\"][0][\"message\"][\"content\"]\n            doc_content[action_type] = msg\n            with open(log_path, \"a\") as logfile:\n                log_item = {\"step\": i, \"prompt\": prompt, \"image_before\": f\"{demo_name}_{i}.png\","
        },
        {
            "comment": "Generates and saves documents, writes log entries, handles errors with colorful output, sleeps for a specified interval between requests.",
            "location": "\"/media/root/Toshiba XG3/works/AppAgent/docs/src/scripts/document_generation.py\":130-140",
            "content": "                            \"image_after\": f\"{demo_name}_{i + 1}.png\", \"response\": rsp}\n                logfile.write(json.dumps(log_item) + \"\\n\")\n            with open(doc_path, \"w\") as outfile:\n                outfile.write(str(doc_content))\n            doc_count += 1\n            print_with_color(f\"Documentation generated and saved to {doc_path}\", \"yellow\")\n        else:\n            print_with_color(rsp[\"error\"][\"message\"], \"red\")\n        time.sleep(configs[\"REQUEST_INTERVAL\"])\nprint_with_color(f\"Documentation generation phase completed. {doc_count} docs generated.\", \"yellow\")"
        }
    ]
}